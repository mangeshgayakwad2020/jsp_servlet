package com.greatdigitallab.web.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

public class StudentDBUtil {

	private DataSource dataSource;

	public StudentDBUtil(DataSource dataSource) {
		this.dataSource = dataSource;
	}
	
	public List<Student> getStudents() throws Exception {
		
		List<Student> students = new ArrayList<Student>();
		
		Connection myConn = null;
		Statement myStmt = null;
		ResultSet myRs = null;
		
		try {
			// get a connection
			myConn = dataSource.getConnection();
			
			// create sql statement
			String sql = "select * from student order by first_name";
			
			myStmt = myConn.createStatement();
			
			// execute query
			myRs = myStmt.executeQuery(sql);
			
			// process result set
			while(myRs.next()) {
				// retrieve data from result set row
				int id = myRs.getInt("id");
				String firstName = myRs.getString("first_name");
				String lastName = myRs.getString("last_name");
				String email = myRs.getString("email");
				
				// create new student object
				Student student = new Student(id, firstName, lastName, email);
				
				// add it to the list of students
				students.add(student);
			}			
		}finally {
			// close JDBC objects
			close(myConn, myStmt, myRs);
		}
		
		return students;
	}

	private void close(Connection myConn, Statement myStmt, ResultSet myRs) {

		try {
			if(myRs != null) {
				myRs.close();
			}
			if(myStmt != null) {
				myStmt.close();
			}
			if(myConn != null) {
				myConn.close(); // doesn't really close it.. just puts back in connection pool
			}
		}catch(Exception exc) {
			exc.printStackTrace();
		}
	}

	public void addStudent(Student student) throws Exception {

		Connection myConn = null;
		PreparedStatement myStmt = null;
		try {
			// get db connection
			myConn = dataSource.getConnection();
			
			// create sql for insert
			String sql = "Insert into student (first_name, last_name, email)"
					+ "values (?, ?, ?)";
			
			myStmt = myConn.prepareStatement(sql);
			
			// set the param values for the student
			myStmt.setString(1, student.getFirstName());
			myStmt.setString(2, student.getLastName());
			myStmt.setString(3, student.getEmail());
			
			// execute sql insert
			myStmt.execute();
		}finally {
			// clean up JDBC objects
			close(myConn, myStmt, null);
		}
		
		
		
	}

	public Student getStudent(String studentId) throws Exception {

		Student student = null;
		
		Connection myConn = null;
		PreparedStatement myStmt = null;
		ResultSet myRs = null;
		
		int id;
		
		try {
			// convert student id to int
			id = Integer.parseInt(studentId);
			
			// get connection to database
			myConn = dataSource.getConnection();
			
			// create sql to get selected student
			String sql = "select * from student where id = ?";
			
			// create prepared statement
			myStmt = myConn.prepareStatement(sql);
			
			// set params
			myStmt.setInt(1, id);
			
			// execute statement
			myRs = myStmt.executeQuery();
			
			// retrieve data from result set row
			if(myRs.next()) {
				String firstName = myRs.getString("first_name");
				String lastName = myRs.getString("last_name");
				String email = myRs.getString("email");
				
				// use the studentId during construction
				student = new Student(id, firstName, lastName, email);
			}else {
				throw new Exception("Could not find student id : " + id);
			}
		}finally {
			// clean up JDBC objects
			close(myConn, myStmt, myRs);
		}
		
		return student;
	}
}
